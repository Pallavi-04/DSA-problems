Move all zeroes to end of array 
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Given an array arr[] of N positive integers. Push all the zeros of the given array to the right end of the array while maitaining the order of non-zero elements.
Note that you must do this in-place without making a copy of the array.
 
Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

***************************************************  APPROACH ******************************************
This question comes under a broad category of "Array Transformation". This category is the meat of tech interviews.
Mostly because arrays are such a simple and easy to use data structure.
Traversal or representation doesn't require any boilerplate code and most of your code will look like the Pseudocode itself.

The 2 requirements of the question are:

    Move all the 0's to the end of array.

    All the non-zero elements must retain their original order.

It's good to realize here that both the requirements are mutually exclusive, i.e., you can solve the individual sub-problems and then combine them for the final solution.

------------------------------------------------Approach #1 (Space Sub-Optimal) [Accepted]  BRUTE FORCE-------------------------------

void moveZeroes(vector<int>& nums) {

    int n = nums.size();
   
    int numZeroes = 0;   // Count the zeroes
    for (int i = 0; i < n; i++) 
       numZeroes += (nums[i] == 0);
       
    // Make all the non-zero elements retain their original order.
    vector<int> ans;

    for (int i = 0; i < n; i++) {

        if (nums[i] != 0) {

            ans.push_back(nums[i]);
        }

    }
    
// Move all zeroes to the end
    while (numZeroes--) {

        ans.push_back(0);

    }

    // Combine the result

    for (int i = 0; i < n; i++) {

        nums[i] = ans[i];

    }

}

Complexity Analysis

Space Complexity : O(n). Since we are creating the "ans" array to store results.

Time Complexity: O(n). However, the total number of operations are sub-optimal. We can achieve the same result in less number of operations.

If asked in an interview, the above solution would be a good start. You can explain the interviewer(not code) the above and build your base for the next Optimal Solution.


----------------------------------------------------- Approach #2 (Space Optimal, Operation Sub-Optimal) [Accepted]-------------------------------

This approach works the same way as above, i.e. , first fulfills one requirement and then another. The catch? It does it in a clever way. 
The above problem can also be stated in alternate way, " Bring all the non 0 elements to the front of array keeping their relative order same".

This is a 2 pointer approach. 
If the newly found element is not a 0, we record it just after the last found non-0 element. 
The position of last found non-0 element is denoted by the slow pointer "lastNonZeroFoundAt" variable.
As we keep finding new non-0 elements, we just overwrite them at the "lastNonZeroFoundAt + 1" 'th index. 
This overwrite will not result in any loss of data because
we already processed what was there(if it were non-0,it already is now written at it's corresponding index,or if it were 0 it will be handled later in time).

After the "cur" index reaches the end of array, we now know that all the non-0 elements have been moved to beginning of array in their original order.
Now comes the time to fulfil other requirement, "Move all 0's to the end". We now simply need to fill all the indexes after the "lastNonZeroFoundAt" index with 0.

void moveZeroes(vector<int>& nums) {

    int lastNonZeroFoundAt = 0;

    // If the current element is not 0, then we need to

    // append it just in front of last non 0 element we found. 

    for (int i = 0; i < nums.size(); i++) {

        if (nums[i] != 0) {

            nums[lastNonZeroFoundAt++] = nums[i];

        }

    }

 	// After we have finished processing new elements,

 	// all the non-zero elements are already at beginning of array.

 	// We just need to fill remaining array with 0's.

    for (int i = lastNonZeroFoundAt; i < nums.size(); i++) {

        nums[i] = 0;

    }

}

Complexity Analysis

Space Complexity : O(1). Only constant space is used.

Time Complexity: O(n). However, the total number of operations are still sub-optimal. The total operations (array writes) that code does is nnn (Total number of elements).

******************************************************************************
Take an integer non_zero_Count to keep the count of non-zero elements.       *
when nums[i] is not zero shift the elements to left and do non_zero_Count++. *
Inn this way shift alll non-zeroes to left of array w/o changing their order.*
Now fill zero to the rest of the array.                                      *
******************************************************************************

 void moveZeroes(vector<int>& nums) {
        
        int non_zero_Count = 0;

        for(int i = 0; i < nums.size(); i++)
        {
            if(nums[i] != 0)  //if element is non zero 
            {
                nums[non_zero_Count] = nums[i];
                non_zero_Count++;
            }
        }

        while(non_zero_Count < nums.size())
        {
            nums[non_zero_Count] = 0;
            non_zero_Count++;
        }
    }
    
    -------------------------------------------------Method 3: using C++ STL ------------------------------------------------

In this approach, we will traverse the whole array and will count the number of zeros present in the array. While counting we will delete the zero from the array.
After completing the above process, we will push back the count number of zeros into the array

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
    
        int count = 0;
        int length = nums.size();
        for(int i = 0; i < length; i++)
        {
            if(nums[i] == 0) 
            {
                count++;
            //deleting the zero
                nums.erase(nums.begin() + i);
                i--;
             // The length gets decresed after erasing each element
                length--;
            }
        }
        // inserting the zero into vector        
        for(int i = 0; i < count; i++)
            nums.push_back(0);
    }
};
