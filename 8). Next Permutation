A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100


----------------------------------------- BRUTE FORCE : Finding all possible permutations. ------------------------------------------------------------------------------------

Approach :

          Step 1: Find all possible permutations of elements present and store them.

          Step 2: Search input from all possible permutations.

          Step 3: Print the next permutation present right after it.

_____________________________________________ BETTER APPROACH : Using C++ in-built function

          C++ provides an in-built function called next_permutation() which directly returns the lexicographically next greater permutation of the input.
          
 *****************************CODE*********************************
                      vector<int> nextPermutation(int N, vector<int> arr){
                            // code here
                            vector<int> vec;
                            next_permutation(arr.begin(), arr.end());
                            for(int i = 0; i < N; i++)
                                vec.push_back(arr[i]);
                            return vec;
                        }
                        
_________________________________________________ OPTIMAL APRROACH ________________________________________________________________________
Intuition :

Intuition lies behind the lexicographical ordering of all possible permutations of a given array. There will always be an increasing sequence of all possible permutations when observed.

Letâ€™s check all sequences of permutations of {1,2,3}.

{1,2,3} 

{1,3,2}

{2,1,3}

{2,3,1}

{3,1,2}

{3,2,1}

Thus, we can see every sequence has increasing order. Hence, our approach aims to get a peak from where the increasing sequence starts. This is what we achieve from our first step of the approach. 

Then, we need to get just a larger value than the point where the peak occurs. To make rank as few as possible but greater than input array, just perverse array from breakpoint achieved from the first step of the approach. We achieve these from all remaining steps of our approach.

Approach :

Step 1: Linearly traverse array from backward such that ith index value of the array is less than (i+1)th index value. Store that index in a variable.

Step 2: If the index value received from step 1 is less than 0. This means the given input array is the largest lexicographical permutation. Hence, we will reverse the input array to get the minimum or starting permutation. Linearly traverse array from backward. Find an index that has a value greater than the previously found index. Store index is another variable.

Step 3: Swap values present in indices found in the above two steps.

Step 4: Reverse array from index+1 where the index is found at step 1 till the end of the array.
