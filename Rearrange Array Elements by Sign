You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.

You should rearrange the elements of nums such that the modified array follows the given conditions:

Every consecutive pair of integers have opposite signs.
For all integers with the same sign, the order in which they were present in nums is preserved.
The rearranged array begins with a positive integer.
Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

 

Example 1:

Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  
Example 2:

Input: nums = [-1,1]
Output: [1,-1]
Explanation:
1 is the only positive integer and -1 the only negative integer in nums.
So nums is rearranged to [1,-1].
 

Constraints:

2 <= nums.length <= 2 * 105
nums.length is even
1 <= |nums[i]| <= 105
nums consists of equal number of positive and negative integers.

------------------------------------------------------------ BRUTE FORCE ----------------------------------------------------
   
   
   ***********APPROACH 1:   
       1). Using three different vectors - First for +ve ele , Second for -ve ele & res for resultant vector.
              Store positive ele in pos , negative ele in neg and finally
              Store positve and negative in alternate manner
    
                  `````````` CODE  ````````````````````````````````
                                         vector<int> rearrangeArray(vector<int>& nums) {

                                            vector<int> pos, neg, res;
                                            for(int x: nums)
                                            {
                                                if(x >= 0)
                                                    pos.push_back(x);
                                                else
                                                    neg.push_back(x);
                                            }

                                            int p = 0, n = 0;
                                            for(int i = 0; i < nums.size(); i++)
                                            {
                                                if(i % 2 == 0)
                                                    res.push_back(pos[p++]);
                                                else
                                                    res.push_back(neg[n++]);
                                            }

                                          return res;
                                        }
                                        
     
     ******* APPROACH 2: 
     `````````````````````````````````````` CODE ````````````````````````````````````````
      
                            vector<int> rearrangeArray(vector<int>& nums) {

                              vector<int> pos, neg, res;
                              for(auto x: nums)
                              {
                                  if(x >= 0)
                                      pos.push_back(x);
                                  else
                                      neg.push_back(x);
                              }

                              for(int i = 0; i < pos.size(); i++)
                              {
                                  res.push_back(pos[i]);
                                  res.push_back(neg[i]);
                              }

                            return res;
                          }
                          
----------------------------------------------- BETTER SOLUTIION -----------------------------------------

            ---------- CODE ----------------------
                           vector<int> rearrangeArray(vector<int>& nums) {

                                  int n = nums.size();
                                  vector<int> res(n, 0);

                                  int pos = 0, neg = 1;
                                  for(auto x: nums)
                                  {
                                      if(x >= 0)
                                      {
                                          res[pos] = x;
                                          pos += 2;
                                      }
                                      else {
                                          res[neg] = x;
                                          neg += 2;
                                      }
                                  }

                                return res;
                              }
                              
************************************* APPROACH 3: OPTIMAL SOLUTION ********************************************************
      Using queue 
      ------------- CODE -------------------------------
          	
                             void rearrange(int arr[], int n) {
	    
                                        queue<int> pos, neg;
                                        //storing pos & neg elements in queues
                                        for(int i = 0; i < n; i++)
                                        {
                                           if(arr[i] >= 0)
                                                pos.push(arr[i]);
                                           else
                                                neg.push(arr[i]);
                                        }
                                        //updating the original array
                                        for(int i = 0; i < n; )
                                        {
                                            if(!pos.empty())
                                            {
                                                arr[i++] = pos.front(); // pushing positive element into array
                                                pos.pop();          // removing that element from pos queue
                                            }
                                            if(!neg.empty())
                                            {
                                                arr[i++] = neg.front(); // pushing negative element into array
                                                neg.pop();           // removing that element from neg queue
                                            }
                                        }
	  
	                                }
