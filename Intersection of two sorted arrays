Intersection of two sorted arrays

Problem Statement: Find the intersection of two sorted arrays. OR in other words, Given 2 sorted arrays, find all the elements which occur in both the arrays.

Examples:

Example 1:
Input: 
A: [1 2 3 3 4 5 6]
, B: [3 3 5]
Output: 3,3,5
Explanation: We are given two arrays A and B. 
The elements present in both the arrays  
are 3,3 and 5.


SOLUTION------------------------------------------ BRUTE-FORCE APPROACH -----------------------------------------------------------------------------
We are given 2 arrays, what we can do is take the element from array A and search if it is present in array B.

1) Pick the first element from the array A , Check it in array B.Now, since we know that the array is sorted,
if we find an element in array B greater than the current element, we do not check any further. So we break the loop at the first element itself.
int main() {
  vector < int > A {1,2,3,3,4,5,6,7};
  vector < int > B {3,3,4,4,5,8};

  vector < int > ans;
  vector < int > visited(B.size(), 0); // to maintain visited 
  int i = 0, j = 0;
  for (i = 0; i < A.size(); i++) {
    for (j = 0; j < B.size(); j++) {

      if (A[i] == B[j] && visited[j] == 0) { 
      //if element matches and has not been matched with any other before
        ans.push_back(B[j]);
        visited[j] = 1;

        break;
      } else if (B[j] > A[i]) break; 
        //because array is sorted , element will not be beyond this
    }
  }
  
  
  Solution 2: 2 Pointer approach-------------------------------------------------------------------------------------------------
  
  Initialize 2 pointers i and j. i=0 and will iterate over Array A, j=0 and will iterate over Array B.
  
   int i = 0, j = 0; // to traverse the arrays

  while (i < A.size() && j < B.size()) {
    if (A[i] < B[j]) { //if current element in i is smaller
      i++;
    } else if (B[j] < A[i]) {
      j++;
    } else {
      ans.push_back(A[i]); //both elements are equal
      i++;
      j++;
    }
  }
