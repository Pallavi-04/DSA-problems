Remove Duplicates in-place from Sorted Array

Problem Statement: Given an integer array sorted in non-decreasing order, remove the duplicates in place such that each unique element appears only once. The relative order of the elements should be kept the same.

If there are k elements after removing the duplicates, then the first k elements of the array should hold the final result. It does not matter what you leave beyond the first k elements.

Note: Return k after placing the final result in the first k slots of the array.

Examples:

Example 1: 

Input: arr[1,1,2,2,2,3,3]

Output: arr[1,2,3,_,_,_,_]

Explanation: Total number of unique elements are 3, i.e[1,2,3] and Therefore return 3 after assigning [1,2,3] in the beginning of the array.

---------------------------------------SOLUTION------------------------------------------------------------------------
 Two pointers

Intuition: We can think of using two pointers ‘i’ and ‘j’, we move ‘j’ till we don’t get a number arr[j] which is different from arr[i]. As we got a unique number we will increase the i pointer and update its value by arr[j]. 

Approach:

    Take a variable i as 0;
    Use a for loop by using a variable ‘j’ from 1 to length of the array.
    If arr[j] != arr[i], increase ‘i’ and update arr[i] == arr[j].
     After completion of the loop return i+1, i.e size of the array of unique elements.
int removeDuplicates(int arr[], int n)
{
  int i = 0;
  for (int j = 1; j < n; j++) {
    if (arr[i] != arr[j]) {
      i++;
      arr[i] = arr[j];
    }
  }
  return i + 1;
}


*********************CODE********************************************


 int removeDuplicates(vector<int>& nums) {
        int dis = 0;                                      //FOR STORING NUMBER OF DISTINCT ELEMENTS
        for(int i = 0; i < nums.size()-1; i++)
        {
            if(nums[i] != nums[i+1])                      //IF NOT EQUAL THEN STORE THE LAST REPEATITION IN ARRAY  TILL INDEX N-2
                nums[dis++] = nums[i];
        }
        nums[dis] = nums[nums.size()-1];                //STORING LAST ELEMENT IN ARRAY
        return dis+1;
    }
