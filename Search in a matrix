Given a matrix mat[][] of size N x M, where every row and column is sorted in increasing order, and a number X is given. The task is to find whether element X is present in the matrix or not.


Example 1:

Input:
N = 3, M = 3
mat[][] = 3 30 38 
         44 52 54 
         57 60 69
X = 62

Output:
0
Explanation:
62 is not present in the
matrix, so output is 0

************************************** SOLUTION : BINARY SEARCH *********************************
int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
	    // your code here
	    
	    for(int i = 0; i < N; i++)
	    {
	        if(binary_search(mat[i].begin(), mat[i].end(), X) == true)
	            return 1;
	    }
	    
	    return 0;
	}
  
  **************************************** SOLUTION 2 TWO-POINTERS APPROACH *******************************************  
  
  int matSearch (vector <vector <int>> &mat, int N, int M, int X)
	{
	    // your code here
	    
	    int i = 0, j = M-1;
	    while(i < N && j >= 0) {
	        
	        if(mat[i][j] == X)
	            return 1;
	            
	        // if number is greater than X then we have to move left
	        else if(mat[i][j] > X)
	            j--;
	            
	        // if number is lesser than X then we have to move right
	        else 
	            i++;
	    }
	    
	    // if we go out of the matrix then we have to return 0 
	    //that matrix is not found!!!
	    return 0;
	   }
	   
``````````````````````````````````````````````` LEETCODE 74. Search a 2D Matrix ```````````````````````````````````````````````````````````````````````````````````````
You are given an m x n integer matrix matrix with the following two properties:

    Each row is sorted in non-decreasing order.
    The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:

Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

 

Constraints:

    m == matrix.length
    n == matrix[i].length
    1 <= m, n <= 100
    -104 <= matrix[i][j], target <= 104

_________________________________________________________________ CODE ____________________________________________________________

elements in the matrix will be in a monotonically increasing order. So we can apply binary search

 Consider the 2D matrix as a 1D matrix having indices from 0 to (m*n)-1 and apply binary search.
 
 		get the element at middle index using matrix[middle/m][middle%m].

 bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        if(matrix.size() == 0) return false;

        int lo = 0;
        int hi = matrix.size() * matrix[0].size() - 1;

        while(lo <= hi)
        {
            int mid = lo + (hi - lo) / 2;

            if(matrix[mid/matrix[0].size()][mid%matrix[0].size()] == target)
                return true;

            if(matrix[mid/matrix[0].size()][mid%matrix[0].size()] < target)
                lo = mid + 1;

            else hi = mid - 1;
        }

        return false;
    }
