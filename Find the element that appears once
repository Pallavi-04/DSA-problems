Given a sorted array A[] of N positive integers having all the numbers occurring exactly twice, except for one number which will occur only once. Find the number occurring only once.

Example 1:

Input:
N = 5
A = {1, 1, 2, 5, 5}
Output: 2
Explanation: 
Since 2 occurs once, while
other numbers occur twice, 
2 is the answer.

Example 2:

Input:
N = 7
A = {2, 2, 5, 5, 20, 30, 30}
Output: 20
Explanation:
Since 20 occurs once, while
other numbers occur twice, 
20 is the answer.

Your Task:
You don't need to read input or print anything. Your task is to complete the function search() which takes two arguments(array A and integer N) and returns the number occurring only once.

Expected Time Complexity: O(Log(N)).
Expected Auxiliary Space: O(1).

Constraints
0 <   N  <= 10^6
0 <= A[i] <= 10^9


---------------------------------------------------------- C O D E -----------------------------------------------------------------------
	   
	//****************** FIRST APPROACH *************
	int search(int A[], int N){
     if(N == 1) 
	        return A[0];
	        
	    for(int i = 0; i < N; i += 2)
	    {
	        if(A[i] != A[i+1])
	            return A[i];
	    }
	    
	    return -1;
   }
	   
	//******************* SECOND APPROACH *******************
	  
   int search(int A[], int N){ 
     int count = 0;
	   for(int i = 0; i < N; i++)
	    count ^= A[i];
	    
	   return count;
	 }
   
   
   //******************* THIRD APPROACH *******************
       
   int search(int A[], int N){
       unordered_map<int, int> m;
        for(int i = 0; i < N; i++)
            m[A[i]]++;
            
        int ans = 0;
        for(auto it: m)
        {
            if(it.second == 1)
            {
                ans = it.first;
                break;
            }
        }
	   return ans;
	 }  
	   
   //******************* FOURTH APPROACH **********************
            
   int search(int A[], int N){         
            int lo = 0;
            int hi = N-1;
            while(lo < hi)
            {
                int mid = lo + (hi - lo) / 2;
                
                //if mid index is odd ,it means numbers are even . 
                //so it is in pair(i-1,i)
                
                //if mid index is even,it means numbers are odd. 
                //so it is in pair(i,i+1)
                
                if(  (mid % 2 == 0 && A[mid] == A[mid+1]) 
                        || (mid % 2 != 0 && A[mid-1] == A[mid]))
                    lo = mid+1;//left are perfect, go to right
                else 
                    hi = mid;//left is not perfect, go to left
                    
            }
            return A[lo];
	}
