LEETCODE PROBLEM 189: ROTATE ARRAY TO RIGHT
Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

****************************************    SOLUTION *******************************************************

````````````````````````````````````````BRUTE - FORCE APPROACH ````````````````````````````````````````````````
We'll take a temporary space say a vector v
At first, push last n-d elements into v
Then, push first d elements into v
Now copy the vector into the original array


 void leftRotate(int arr[], int n, int d) {
        
        // temporary space 
        vector<int> v;
        
    //At first, push last n-d elements into v
        for(int i = d; i < n; i++) 
        {
            v.push_back(arr[i]);
        }
    //Then, push first d elements into v
        for(int i = 0; i < d; i++) 
        {
            v.push_back(arr[i]);
        }
        
    //Now copy the vector into the original array
        for(int i = 0; i < n; i++)
            arr[i] = v[i];
    }


In case of Right rotation, 
     i) First reverse the whole array. 0 to size-1
    ii) then reverse the array till desired index (given k here)
   iii) Now, reverse the rest n-k elements 

------------------------------------------- CODE ---------------------------------------------------------------
void reverse(vector<int>& arr, int start, int end)
    {
        while(start < end) {
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
        
    }
    void rotate(vector<int>& nums, int k) {
        
        k = k % nums.size();
        /*if n = 4 and you are asked to rotate 5 elements to right,
        it simply means 5%4 = 1 time and rotating 4 times is the same as    original array*/

        //reverse the whole array
        reverse(nums, 0, nums.size()-1);

        //reverse the first k elements
        reverse(nums, 0, k-1);

        //reverse the rest n-k elements
        reverse(nums, k, nums.size()-1);
    }


............................................................................................................................................
In case of left rotation , 
      i) first reverse the array from 0 to desired index(say, k).
     ii) then reverse the rest n-k elements i.e., k to last index.
    iii) Now, reverse the whole array.
    
    
    ALGORITHM :
        rotateArray(D, 0, k - 1);
        rotateArray(D, k, n - 1);
        rotateArray(D, 0, n - 1);
        

In case of right rotation , 
      i) reverse the whole array.           
     ii) then  reverse the array from 0 to desired index(say, k).          
    iii) Now,  reverse the rest n-k elements i.e., k to last index.
    
    
    ALGORITHM :
        rotateArray(D, 0, n - 1);
        rotateArray(D, 0, k - 1);
        rotateArray(D, k, n - 1);
        
 
